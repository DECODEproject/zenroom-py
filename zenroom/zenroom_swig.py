# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

import os
import platform
import sys 

python_version = '_'.join(map(str, sys.version_info[:3]))
system = platform.system()
zenroom_path = os.path.join(os.path.dirname(__file__), "libs", system, python_version)
sys.path.append(zenroom_path)

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_zenroom')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_zenroom')
    _zenroom = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_zenroom', [dirname(__file__)])
        except ImportError:
            import _zenroom
            return _zenroom
        try:
            _mod = imp.load_module('_zenroom', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _zenroom = swig_import_helper()
    del swig_import_helper
else:
    import _zenroom
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def zencode_exec(script: 'char *', conf: 'char *', keys: 'char *', data: 'char *', verbosity: 'int') -> "int":
    return _zenroom.zencode_exec(script, conf, keys, data, verbosity)
zencode_exec = _zenroom.zencode_exec

def zencode_exec_tobuf(script: 'char *', conf: 'char *', keys: 'char *', data: 'char *', verbosity: 'int', stdout_buf: 'char *', stderr_buf: 'char *') -> "int":
    return _zenroom.zencode_exec_tobuf(script, conf, keys, data, verbosity, stdout_buf, stderr_buf)
zencode_exec_tobuf = _zenroom.zencode_exec_tobuf

def zenroom_exec(script: 'char *', conf: 'char *', keys: 'char *', data: 'char *', verbosity: 'int') -> "int":
    return _zenroom.zenroom_exec(script, conf, keys, data, verbosity)
zenroom_exec = _zenroom.zenroom_exec

def zenroom_exec_tobuf(script: 'char *', conf: 'char *', keys: 'char *', data: 'char *', verbosity: 'int', stdout_buf: 'char *', stderr_buf: 'char *') -> "int":
    return _zenroom.zenroom_exec_tobuf(script, conf, keys, data, verbosity, stdout_buf, stderr_buf)
zenroom_exec_tobuf = _zenroom.zenroom_exec_tobuf

def zenroom_exec_rng_tobuf(script: 'char *', conf: 'char *', keys: 'char *', data: 'char *', verbosity: 'int', stdout_buf: 'char *', stderr_buf: 'char *', random_seed: 'char *') -> "int":
    return _zenroom.zenroom_exec_rng_tobuf(script, conf, keys, data, verbosity, stdout_buf, stderr_buf, random_seed)
zenroom_exec_rng_tobuf = _zenroom.zenroom_exec_rng_tobuf

def zencode_exec_rng_tobuf(script: 'char *', conf: 'char *', keys: 'char *', data: 'char *', verbosity: 'int', stdout_buf: 'char *', stderr_buf: 'char *', random_seed: 'char *') -> "int":
    return _zenroom.zencode_exec_rng_tobuf(script, conf, keys, data, verbosity, stdout_buf, stderr_buf, random_seed)
zencode_exec_rng_tobuf = _zenroom.zencode_exec_rng_tobuf

def set_debug(lev: 'int') -> "void":
    return _zenroom.set_debug(lev)
set_debug = _zenroom.set_debug
# This file is compatible with both classic and new-style classes.


